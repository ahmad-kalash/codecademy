Node.js supports require()/module.exports, but as of ES6, JavaScript supports a new more readable and flexible syntax for exporting modules. These are usually broken down into one of two techniques, default export and 
named exports.

We’ll begin with the first syntax, default export. The default export syntax works similarly to
 the module.exports syntax, allowing us to export one module per file.

Let’s look at an example in menu.js.

let Menu = {};

export default Menu;

export default uses the JavaScript export statement to export JavaScript objects, functions, 
and primitive data types.
Menu refers to the name of the Menu object, the object that we are setting the properties on
 within our modules.
When using ES6 syntax, we use export default in place of module.exports. Node.js doesn’t support
 export default by default, so module.exports is usually used for Node.js development and ES6 syntax 
 is used for front-end development. As with most ES6 features, it is common to transpile code 
 since ES6 is not supported by all browsers.

Named exports are also distinct in that they can be exported as soon as they are declared, 
by placing the keyword export in front of variable declarations.
as example export let name='';

 2) import
ES6 module syntax also introduces the import keyword for importing objects. In our order.js example, we import an object like this:

import Menu from './menu';
The import keyword begins the statement.
The keyword Menu here specifies the name of the variable to store the default export in.
from specifies where to load the module from.
'./menu' is the name of the module to load. When dealing with local files, it specifically refers to the name of the file without the extension of the file.
We can then continue using the Menu module in the order.js file.



As of ES6, the import keyword can be used to import functions, objects or primitives previously 
exported into the current script.

There are many ways to use the import keyword, for example, you can import all the exports from
 a script by using the * selector as follows: import * from 'module_name';.

A single function can be imported with curly brackets as follows:
 import {funcA} as name from 'module_name';

Or many functions by name: import {funcA, funcB} as name from 'module_name';


